name: Deploy Harvgram

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  CLUSTER: harvgram-cluster
  ECR_REPO_BACKEND: ${{ secrets.ECR_REPO_BACKEND }}
  ECR_REPO_FRONTEND: ${{ secrets.ECR_REPO_FRONTEND }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
  GITHUBOIDCROLE: ${{ secrets.GITHUBOIDCROLE }}
  SANDBOX_ROLE: ${{ secrets.SANDBOX_ROLE_ARN }}

permissions:
  id-token: write
  contents: read

jobs:
  upload-frontend:
    name: Upload Frontend to S3
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GITHUBOIDCROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Assume sandbox role
        id: assume-role
        shell: bash
        run: |
          CREDS=$(aws sts assume-role \
            --role-arn "${{ env.SANDBOX_ROLE }}" \
            --role-session-name GitHubSession \
            --output json)

          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - uses: actions/checkout@v3

      - name: Build Frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Sync to S3
        run: |
          aws s3 sync frontend/dist ${{ env.S3_BUCKET }} --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: upload-frontend
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GITHUBOIDCROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Assume sandbox role
        id: assume-role
        shell: bash
        run: |
          CREDS=$(aws sts assume-role \
            --role-arn "${{ env.SANDBOX_ROLE }}" \
            --role-session-name GitHubSession \
            --output json)

          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - uses: actions/checkout@v3

      - name: Log in to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push Backend Image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_BACKEND }}:${{ github.sha }} ./backend
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_BACKEND }}:${{ github.sha }}

      - name: Build & Push Frontend Image
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_FRONTEND }}:${{ github.sha }} ./frontend
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_FRONTEND }}:${{ github.sha }}

  register-task-definitions:
    name: Register ECS Task Definitions
    runs-on: ubuntu-latest
    needs: docker
    outputs:
      frontend_task_def_arn: ${{ steps.register-frontend.outputs.frontend_task_def_arn }}
      backend_task_def_arn: ${{ steps.register-backend.outputs.backend_task_def_arn }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GITHUBOIDCROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Assume sandbox role
        id: assume-role
        shell: bash
        run: |
          CREDS=$(aws sts assume-role \
            --role-arn "${{ env.SANDBOX_ROLE }}" \
            --role-session-name GitHubSession \
            --output json)

          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Register new frontend task definition
        id: register-frontend
        run: |
          aws ecs describe-task-definition \
            --task-definition harvgram-frontend \
            --query "taskDefinition" \
            --output json > base-task-def.json

          jq --arg IMAGE "${{ env.ECR_REPO_FRONTEND }}:${{ github.sha }}" '
            .containerDefinitions[0].image = $IMAGE |
            del(
              .taskDefinitionArn,
              .revision,
              .status,
              .requiresAttributes,
              .compatibilities,
              .registeredAt,
              .registeredBy,
              .inferenceAccelerators,
              .ephemeralStorage,
              .tags
            )
          ' base-task-def.json > new-task-def.json

          ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)

          echo "frontend_task_def_arn=$ARN" >> $GITHUB_OUTPUT

      - name: Register new backend task definition
        id: register-backend
        run: |
          aws ecs describe-task-definition \
            --task-definition harvgram-backend \
            --query "taskDefinition" \
            --output json > base-task-def.json

          jq --arg IMAGE "${{ env.ECR_REPO_BACKEND }}:${{ github.sha }}" '
            .containerDefinitions[0].image = $IMAGE |
            del(
              .taskDefinitionArn,
              .revision,
              .status,
              .requiresAttributes,
              .compatibilities,
              .registeredAt,
              .registeredBy,
              .inferenceAccelerators,
              .ephemeralStorage,
              .tags
            )
          ' base-task-def.json > new-task-def.json

          ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query "taskDefinition.taskDefinitionArn" \
            --output text)

          echo "backend_task_def_arn=$ARN" >> $GITHUB_OUTPUT

  force-ecs-deployment:
    name: Force ECS Deployment
    runs-on: ubuntu-latest
    needs: register-task-definitions
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.GITHUBOIDCROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Assume sandbox role
        id: assume-role
        shell: bash
        run: |
          CREDS=$(aws sts assume-role \
            --role-arn "${{ env.SANDBOX_ROLE }}" \
            --role-session-name GitHubSession \
            --output json)

          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - name: Force ECS Deployment Frontend
        run: |
          aws ecs update-service \
            --cluster ${{ env.CLUSTER }} \
            --service frontend-service \
            --force-new-deployment \
            --task-definition ${{ needs.register-task-definitions.outputs.frontend_task_def_arn }} \
            --region ${{ env.AWS_REGION }}

      - name: Force ECS Deployment Backend
        run: |
          aws ecs update-service \
            --cluster ${{ env.CLUSTER }} \
            --service backend-service \
            --force-new-deployment \
            --task-definition ${{ needs.register-task-definitions.outputs.backend_task_def_arn }} \
            --region ${{ env.AWS_REGION }}
