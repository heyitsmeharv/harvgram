name: Deploy Harvgram

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPO_BACKEND: ${{ secrets.ECR_REPO_BACKEND }}
  ECR_REPO_FRONTEND: ${{ secrets.ECR_REPO_FRONTEND }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
  GITHUBOIDCROLE: ${{ secrets.GITHUBOIDCROLE}}
  SANDBOX_ROLE: ${{ secrets.SANDBOX_ROLE_ARN }}

permissions:
  id-token: write
  contents: read

jobs:
  upload-frontend:
    name: Upload Frontend to S3
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.GITHUBOIDCROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Assume role
        id: assume-role
        shell: bash
        run: |
          CREDS=$(aws sts assume-role \
            --role-arn "${{ env.SANDBOX_ROLE }}" \
            --role-session-name GitHubSession \
            --output json)

          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - uses: actions/checkout@v3

      - name: Build Frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Sync to S3
        run: |
          aws s3 sync frontend/dist ${{ env.S3_BUCKET }} --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: upload-frontend
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.GITHUBOIDCROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Assume role
        id: assume-role
        shell: bash
        run: |
          CREDS=$(aws sts assume-role \
            --role-arn "${{ env.SANDBOX_ROLE }}" \
            --role-session-name GitHubSession \
            --output json)

          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - uses: actions/checkout@v3

      - name: Log in to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push Backend Image
        run: |
          docker build -t ${{ env.ECR_REPO_BACKEND }}:latest ./backend
          docker tag ${{ env.ECR_REPO_BACKEND }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_BACKEND }}:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_BACKEND }}:latest

      - name: Build & Push Frontend Image
        run: |
          docker build -t ${{ env.ECR_REPO_FRONTEND }}:latest ./frontend
          docker tag ${{ env.ECR_REPO_FRONTEND }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_FRONTEND }}:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_FRONTEND }}:latest

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: docker 
    outputs:
      role-session-name: github-actions-${{ github.run_id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.GITHUBOIDCROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Assume role
        id: assume-role
        shell: bash
        run: |
          CREDS=$(aws sts assume-role \
            --role-arn "${{ env.SANDBOX_ROLE }}" \
            --role-session-name GitHubSession \
            --output json)

          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - name: Verify AWS caller identity
        run: aws sts get-caller-identity

      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.3

      - name: Terraform Init
        run: terraform -chdir=infrastructure/environments/sandbox init

      - name: Terraform Plan
        run: terraform -chdir=infrastructure/environments/sandbox plan -var-file=env.tfvars

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform-plan
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.GITHUBOIDCROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Assume role
        id: assume-role
        shell: bash
        run: |
          CREDS=$(aws sts assume-role \
            --role-arn "${{ env.SANDBOX_ROLE }}" \
            --role-session-name GitHubSession \
            --output json)

          echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
          echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

      - name: Verify AWS caller identity
        run: aws sts get-caller-identity

      - uses: actions/checkout@v3

      - name: Install dependencies for Lambda functions
        run: |
          for dir in ./infrastructure/handlers/*; do
            echo "Installing deps in $dir"
            cd "$dir"
            npm install
            cd - > /dev/null
          done

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.3

      - name: Terraform Init
        run: terraform -chdir=infrastructure/environments/sandbox init

      - name: Terraform Apply
        run: terraform -chdir=infrastructure/environments/sandbox apply -var-file=env.tfvars -auto-approve

  force-ecs-deployment:
      name: Force ECS Deployment
      runs-on: ubuntu-latest
      needs: terraform-apply
      steps:

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            role-to-assume: ${{ env.GITHUBOIDCROLE }}
            aws-region: ${{ env.AWS_REGION }}

        - name: Install jq
          run: sudo apt-get install -y jq

        - name: Assume role
          id: assume-role
          shell: bash
          run: |
            CREDS=$(aws sts assume-role \
              --role-arn "${{ env.SANDBOX_ROLE }}" \
              --role-session-name GitHubSession \
              --output json)

            echo "AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r '.Credentials.AccessKeyId')" >> $GITHUB_ENV
            echo "AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r '.Credentials.SecretAccessKey')" >> $GITHUB_ENV
            echo "AWS_SESSION_TOKEN=$(echo $CREDS | jq -r '.Credentials.SessionToken')" >> $GITHUB_ENV

        - name: Force ECS Deployment Frontend
          run: |
            aws ecs update-service \
              --cluster harvgram-cluster \
              --service backend-service \
              --force-new-deployment \
              --region eu-west-2 

        - name: Force ECS Deployment Backend
          run: |
            aws ecs update-service \
              --cluster harvgram-cluster \
              --service frontend-service \
              --force-new-deployment \
              --region eu-west-2 