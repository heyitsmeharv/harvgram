name: Deploy Harvgram

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPO_BACKEND: ${{ secrets.ECR_REPO_BACKEND }}
  ECR_REPO_FRONTEND: ${{ secrets.ECR_REPO_FRONTEND }}
  S3_BUCKET: ${{ secrets.S3_BUCKET }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
  GITHUBOIDCROLE: ${{ secrets.GITHUBOIDCROLE}}

permissions:
  id-token: write
  contents: read

jobs:
  setup-aws:
    name: Authenticate via AWS OIDC
    runs-on: ubuntu-latest
    outputs:
      role-session-name: github-actions-${{ github.run_id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.GITHUBOIDCROLE }}
          aws-region: ${{ env.AWS_REGION }}

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: setup-aws
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform -chdir=infrastructure/environments/sandbox plan -var-file=env.tfvars

  upload-frontend:
    name: Upload Frontend to S3
    runs-on: ubuntu-latest
    needs: terraform-plan
    steps:
      - uses: actions/checkout@v3

      - name: Build Frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Sync to S3
        run: |
          aws s3 sync frontend/dist ${{ env.S3_BUCKET }} --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: upload-frontend
    steps:
      - uses: actions/checkout@v3

      - name: Log in to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push Backend Image
        run: |
          docker build -t ${{ env.ECR_REPO_BACKEND }}:latest ./backend
          docker tag ${{ env.ECR_REPO_BACKEND }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_BACKEND }}:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_BACKEND }}:latest

      - name: Build & Push Frontend Image
        run: |
          docker build -t ${{ env.ECR_REPO_FRONTEND }}:latest ./frontend
          docker tag ${{ env.ECR_REPO_FRONTEND }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_FRONTEND }}:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO_FRONTEND }}:latest

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform -chdir=infrastructure/environments/sandbox apply -var-file=env.tfvars -auto-approve